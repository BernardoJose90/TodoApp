name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

permissions:
  id-token: write    # required for GitHub OIDC
  contents: read     # for checkout

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Checkout the repository
      - uses: actions/checkout@v3

      # 2️⃣ Configure AWS OIDC credentials
      - name: Configure AWS OIDC credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::851725622142:role/GitHubActions-EKS-Role
          aws-region: eu-west-2

      # 3️⃣ Debug: confirm the runner assumed the role correctly
      - name: Debug AWS credentials
        run: |
          echo "Caller identity:"
          aws sts get-caller-identity

      # 4️⃣ Login to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-west-2 \
            | docker login --username AWS --password-stdin 851725622142.dkr.ecr.eu-west-2.amazonaws.com

      # 5️⃣ Build and push Docker image
      - name: Build and push Docker image
        run: |
          IMAGE_REPO=851725622142.dkr.ecr.eu-west-2.amazonaws.com/webserver/todoapp
          docker build -t $IMAGE_REPO:latest .
          docker push $IMAGE_REPO:latest

      # 6️⃣ Generate kubeconfig dynamically (clean old kubeconfig first)
      - name: Generate kubeconfig
        run: |
          rm -f ~/.kube/config
          aws eks update-kubeconfig --name Todo-list-App-cluster --region eu-west-2
          kubectl get nodes  # sanity check

      # 7️⃣ Deploy the Docker image to EKS
      - name: Deploy to EKS
        run: |
          IMAGE_REPO=851725622142.dkr.ecr.eu-west-2.amazonaws.com/webserver/todoapp
          kubectl set image deployment/todo-app-deployment todo-app=$IMAGE_REPO:latest
          kubectl rollout status deployment/todo-app-deployment

      # 8️⃣ Optional: Verify the deployment
      - name: Verify Deployment
        run: |
          kubectl get pods
          kubectl get services
          kubectl describe service todo-app-service
          kubectl get events --sort-by=.metadata.creationTimestamp  # Check for any issues    