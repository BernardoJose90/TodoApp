name: Deploy to EKS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-west-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com
  ECR_REPOSITORY: webserver/todoapp
  EKS_CLUSTER_NAME: TodoApp-Production
  IMAGE_TAG: latest

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

    - name: Verify EKS access
      run: |
        kubectl get nodes

    - name: Fix IAM permissions for Secrets Manager
      run: |
        # Add Secrets Manager access to the node role
        aws iam attach-role-policy \
          --role-name eksctl-TodoApp-Production-nodegrou-NodeInstanceRole-ME7jWEW3uNJM \
          --policy-arn arn:aws:iam::aws:policy/SecretsManagerReadWrite
        echo "‚úÖ Added Secrets Manager permissions to node role"

    - name: Deploy to EKS
      env:
        IMAGE_URL: ${{ steps.build-image.outputs.IMAGE_URL }}
      run: |
        echo "üöÄ Deploying Todo App to EKS..."
        
        # Update the deployment with the new image
        kubectl set image deployment/todo-app-deployment todo-app=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Wait for rollout to complete
        kubectl rollout status deployment/todo-app-deployment --timeout=300s
        
        echo "‚úÖ Deployment completed successfully!"

    - name: Verify deployment
      run: |
        echo "üîç Checking deployment status..."
        kubectl get deployments
        kubectl get pods
        
        echo "üìã Checking application logs..."
        kubectl logs deployment/todo-app-deployment
        
        echo "üåê Checking service status..."
        kubectl get services

    - name: Health check
      run: |
        echo "üè• Performing health check..."
        # Get the pod name
        POD_NAME=$(kubectl get pods -l app=todo-app -o jsonpath='{.items[0].metadata.name}')
        
        # Check if the pod is running
        kubectl get pod $POD_NAME
        
        # Check application health
        kubectl exec $POD_NAME -- curl -s http://localhost:5000/health || echo "Health endpoint not available yet"
        
        echo "‚úÖ Health check completed"