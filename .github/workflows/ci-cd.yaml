name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

permissions:
  id-token: write      # Required for OIDC
  contents: read       # To checkout repo

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - uses: actions/checkout@v3

      # 2. Configure AWS credentials using OIDC
      - name: Configure AWS using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::851725622142:role/GitHubActions-EKS-Role
          aws-region: eu-west-2

      # 3. Debug: confirm assumed identity
      - name: Check AWS identity
        run: aws sts get-caller-identity

      # 4. Login to ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-west-2 \
          | docker login --username AWS --password-stdin 851725622142.dkr.ecr.eu-west-2.amazonaws.com

      # 5. Build & push Docker image
      - name: Build and Push Docker Image
        run: |
          IMAGE_REPO=851725622142.dkr.ecr.eu-west-2.amazonaws.com/webserver/todoapp
          docker build -t $IMAGE_REPO:latest .
          docker push $IMAGE_REPO:latest

      # 6. Deploy to EKS
      - name: Deploy to EKS
        run: |
          # Optional: clean kubeconfig to avoid stale credentials
          rm -f ~/.kube/config

          # Generate kubeconfig using assumed role (do NOT pass --role-arn)
          aws eks update-kubeconfig --name Todo-list-App-cluster --region eu-west-2

          # Confirm cluster access
          kubectl get nodes

          # Deploy new image
          IMAGE_REPO=851725622142.dkr.ecr.eu-west-2.amazonaws.com/webserver/todoapp
          kubectl set image deployment/todo-app-deployment todo-app=$IMAGE_REPO:latest

          # Wait for rollout to complete
          kubectl rollout status deployment/todo-app-deployment
          