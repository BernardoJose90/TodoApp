name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configure AWS OIDC credentials
      - name: Configure AWS OIDC credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::851725622142:role/GitHubActions-EKS-Role
          aws-region: eu-west-2

      # 3Ô∏è‚É£ Debug caller identity
      - name: Debug AWS credentials
        run: |
          echo "üîç Checking AWS identity..."
          aws sts get-caller-identity
          echo "‚úÖ AWS credentials configured"

      # 4Ô∏è‚É£ Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client

      # 5Ô∏è‚É£ Configure kubeconfig with proper authentication
      - name: Configure kubeconfig for EKS
        run: |
          echo "üîß Configuring kubeconfig for EKS cluster..."
          aws eks update-kubeconfig \
            --region eu-west-2 \
            --name Todo-list-App-cluster \
            --verbose
          
          echo "üìã Kubeconfig contents:"
          cat ~/.kube/config

      # 6Ô∏è‚É£ Verify cluster access
      - name: Verify cluster access
        run: |
          echo "üîê Testing cluster access..."
          kubectl get nodes
          kubectl auth can-i get pods

      # 7Ô∏è‚É£ Login to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-west-2 \
            | docker login --username AWS --password-stdin 851725622142.dkr.ecr.eu-west-2.amazonaws.com

      # 8Ô∏è‚É£ Build and push Docker image
      - name: Build and push Docker image
        run: |
          IMAGE_REPO=851725622142.dkr.ecr.eu-west-2.amazonaws.com/webserver/todoapp
          docker build -t $IMAGE_REPO:latest .
          docker push $IMAGE_REPO:latest

      # 9Ô∏è‚É£ Deploy to EKS
      - name: Deploy to EKS
        run: |
          IMAGE_REPO=851725622142.dkr.ecr.eu-west-2.amazonaws.com/webserver/todoapp
          
          # Apply deployment
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: todo-app-deployment
            labels:
              app: todo-app
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: todo-app
            template:
              metadata:
                labels:
                  app: todo-app
              spec:
                containers:
                - name: todo-app
                  image: $IMAGE_REPO:latest
                  ports:
                  - containerPort: 5000
                  env:
                  - name: ENV
                    value: "AWS"
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "250m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
          EOF

          # Apply service
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: todo-app-service
          spec:
            selector:
              app: todo-app
            ports:
              - protocol: TCP
                port: 80
                targetPort: 5000
            type: LoadBalancer
          EOF

      # üîü Wait for rollout
      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/todo-app-deployment --timeout=300s

      # üîç Verify deployment
      - name: Verify Deployment
        run: |
          kubectl get pods,services,deployments