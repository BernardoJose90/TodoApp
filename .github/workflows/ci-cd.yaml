name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-west-2
  EKS_CLUSTER_NAME: Todo-list-App-cluster
  ECR_REPOSITORY: webserver/todoapp

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::851725622142:role/GitHubActions-EKS-Role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Debug AWS Identity
        run: |
          echo "🔍 AWS Identity in GitHub Actions:"
          aws sts get-caller-identity
          echo ""

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Create kubeconfig manually
        run: |
          echo "🔧 Creating kubeconfig manually..."
          
          # Get cluster details
          CLUSTER_ENDPOINT=$(aws eks describe-cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --query "cluster.endpoint" --output text)
          CA_DATA=$(aws eks describe-cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --query "cluster.certificateAuthority.data" --output text)
          
          echo "Cluster Endpoint: $CLUSTER_ENDPOINT"
          
          # Create kubeconfig directory
          mkdir -p ~/.kube
          
          # Create kubeconfig with explicit authentication
          cat > ~/.kube/config << EOF
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority-data: $CA_DATA
              server: $CLUSTER_ENDPOINT
            name: eks-cluster
          contexts:
          - context:
              cluster: eks-cluster
              user: github-actions
            name: eks-context
          current-context: eks-context
          kind: Config
          users:
          - name: github-actions
            user:
              exec:
                apiVersion: client.authentication.k8s.io/v1beta1
                command: aws
                args:
                - eks
                - get-token
                - --cluster-name
                - ${{ env.EKS_CLUSTER_NAME }}
                - --region
                - ${{ env.AWS_REGION }}
                env: null
          EOF
          
          echo "✅ Manual kubeconfig created"
          cat ~/.kube/config

      - name: Test EKS token generation
        run: |
          echo "🔍 Testing EKS token generation..."
          aws eks get-token --cluster-name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --output json | jq -r '.status.token' | head -c 50
          echo "..."
          echo "✅ Token generated successfully"

      - name: Test kubectl access
        run: |
          echo "🔐 Testing kubectl access..."
          kubectl get nodes --v=6

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin 851725622142.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:latest .
          docker tag ${{ env.ECR_REPOSITORY }}:latest 851725622142.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          docker push 851725622142.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy to EKS
        run: |
          IMAGE_URL=851725622142.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: todo-app-deployment
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: todo-app
            template:
              metadata:
                labels:
                  app: todo-app
              spec:
                containers:
                - name: todo-app
                  image: $IMAGE_URL
                  ports:
                  - containerPort: 5000
                  env:
                  - name: ENV
                    value: "LOCAL"
          EOF


          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: todo-app-service
          spec:
            selector:
              app: todo-app
            ports:
            - protocol: TCP
              port: 80
              targetPort: 5000
            type: LoadBalancer
          EOF
      