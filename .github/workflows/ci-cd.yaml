name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-west-2
  EKS_CLUSTER_NAME: TodoApp-Production  # ‚Üê Updated to new cluster
  ECR_REPOSITORY: webserver/todoapp

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::851725622142:role/GitHubActions-EKS-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Configure EKS access
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Verify EKS access
        run: |
          kubectl get nodes
          echo "‚úÖ EKS access verified!"

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin 851725622142.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:latest .
          docker tag ${{ env.ECR_REPOSITORY }}:latest 851725622142.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          docker push 851725622142.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy to EKS
        run: |
          IMAGE_URL=851725622142.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          
          echo "üöÄ Deploying Todo App to EKS..."
          
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: todo-app-deployment
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: todo-app
            template:
              metadata:
                labels:
                  app: todo-app
              spec:
                containers:
                - name: todo-app
                  image: $IMAGE_URL
                  ports:
                  - containerPort: 5000
                  env:
                  - name: ENV
                    value: "AWS"
                  - name: FLASK_APP
                    value: "main.py"
                  - name: FLASK_RUN_HOST
                    value: "0.0.0.0"
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "250m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
          EOF

          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: todo-app-service
          spec:
            selector:
              app: todo-app
            ports:
            - protocol: TCP
              port: 80
              targetPort: 5000
            type: LoadBalancer
          EOF

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/todo-app-deployment --timeout=300s
          kubectl get pods,services

      - name: Get LoadBalancer URL
        run: |
          echo "üåê Getting LoadBalancer information..."
          sleep 30
          kubectl get service todo-app-service -o wide
          
          LB_HOSTNAME=$(kubectl get service todo-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "Not available yet")
          echo "üì± Your Todo App will be available at: http://$LB_HOSTNAME"