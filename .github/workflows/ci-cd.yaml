name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::851725622142:role/GitHubActions-EKS-Role
          aws-region: eu-west-2

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Configure EKS access
        run: |
          aws eks update-kubeconfig --region eu-west-2 --name Todo-list-App-cluster

      - name: Verify cluster access
        run: |
          echo "üîê Testing cluster access..."
          kubectl get nodes
          kubectl auth can-i get pods

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 851725622142.dkr.ecr.eu-west-2.amazonaws.com

      - name: Build and push Docker image
        run: |
          IMAGE_REPO=851725622142.dkr.ecr.eu-west-2.amazonaws.com/webserver/todoapp
          docker build -t $IMAGE_REPO:latest .
          docker push $IMAGE_REPO:latest

      - name: Deploy to EKS
        run: |
          IMAGE_REPO=851725622142.dkr.ecr.eu-west-2.amazonaws.com/webserver/todoapp
          
          # Create or update deployment
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: todo-app-deployment
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: todo-app
            template:
              metadata:
                labels:
                  app: todo-app
              spec:
                containers:
                - name: todo-app
                  image: $IMAGE_REPO:latest
                  ports:
                  - containerPort: 5000
                  env:
                  - name: ENV
                    value: "AWS"
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "250m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
          EOF

          # Create or update service
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: todo-app-service
          spec:
            selector:
              app: todo-app
            ports:
              - protocol: TCP
                port: 80
                targetPort: 5000
            type: LoadBalancer
          EOF

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/todo-app-deployment --timeout=300s

      - name: Verify deployment
        run: |
          kubectl get pods,services,deployments