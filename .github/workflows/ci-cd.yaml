name: CI/CD Pipeline with Debug

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-west-2
  EKS_CLUSTER_NAME: TodoApp-Production
  ECR_REPOSITORY: webserver/todoapp

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::851725622142:role/GitHubActions-EKS-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Configure EKS access
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Verify EKS access
        run: |
          kubectl get nodes
          echo "‚úÖ EKS access verified!"

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin 851725622142.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:latest .
          docker tag ${{ env.ECR_REPOSITORY }}:latest 851725622142.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          docker push 851725622142.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest

      - name: Create IAM Service Account for TodoApp
        run: |
          eksctl create iamserviceaccount \
            --name todo-app-service-account \
            --namespace default \
            --cluster TodoApp-Production \
            --region eu-west-2 \
            --attach-policy-arn arn:aws:iam::aws:policy/SecretsManagerReadWrite \
            --approve \
            --override-existing-serviceaccounts

      - name: Debug current deployment
        run: |
          echo "üîç Checking current deployment status..."
          kubectl get deployments
          kubectl get pods -l app=todo-app
          kubectl describe deployment todo-app-deployment

      - name: Deploy to EKS
        run: |
          IMAGE_URL=851725622142.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          
          echo "üöÄ Deploying Todo App to EKS..."
          
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: todo-app-deployment
          spec:
            replicas: 1  # Start with 1 replica for debugging
            selector:
              matchLabels:
                app: todo-app
            template:
              metadata:
                labels:
                  app: todo-app
              spec:
                containers:
                - name: todo-app
                  image: $IMAGE_URL
                  ports:
                  - containerPort: 5000
                  env:
                  - name: ENV
                    value: "AWS"
                  - name: FLASK_APP
                    value: "main.py"
                  - name: FLASK_RUN_HOST
                    value: "0.0.0.0"
                  - name: PYTHONPATH
                    value: "/app"
                  command: ["/bin/sh"]
                  args: ["-c", "python -c 'import app; print(\"App imports successful\")' && flask run"]
          EOF

      - name: Check application logs
        run: |
          echo "üîç Checking application logs..."
          sleep 30
          kubectl get pods -l app=todo-app
          kubectl logs -l app=todo-app --tail=100