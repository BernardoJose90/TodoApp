name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

permissions:
  id-token: write    # Required for GitHub OIDC
  contents: read     # Required for checkout

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Configure AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::851725622142:role/GitHubActions-EKS-Role
          aws-region: eu-west-2

      # 3Ô∏è‚É£ Verify the caller identity (should show the assumed GitHubActions-EKS-Role)
      - name: Verify AWS identity
        run: aws sts get-caller-identity

      # 4Ô∏è‚É£ Authenticate to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-west-2 \
            | docker login --username AWS --password-stdin 851725622142.dkr.ecr.eu-west-2.amazonaws.com

      # 5Ô∏è‚É£ Build and push Docker image to ECR
      - name: Build and push Docker image
        run: |
          IMAGE_REPO=851725622142.dkr.ecr.eu-west-2.amazonaws.com/webserver/todoapp
          docker build -t $IMAGE_REPO:latest .
          docker push $IMAGE_REPO:latest

      # 6Ô∏è‚É£ Generate kubeconfig (no --role-arn to avoid self-assume)
      - name: Configure kubeconfig for EKS
        run: |
          rm -f ~/.kube/config
          aws eks update-kubeconfig \
            --name Todo-list-App-cluster \
            --region eu-west-2
          echo "‚úÖ Kubeconfig generated successfully."

      # 7Ô∏è‚É£ Validate access to EKS
      - name: Validate EKS permissions
        run: |
          echo "üîç Checking access to EKS cluster..."
          kubectl auth can-i get nodes
          kubectl get nodes

      # 8Ô∏è‚É£ Deploy the new image to your EKS Deployment
      - name: Deploy application to EKS
        run: |
          IMAGE_REPO=851725622142.dkr.ecr.eu-west-2.amazonaws.com/webserver/todoapp
          kubectl set image deployment/todo-app-deployment todo-app=$IMAGE_REPO:latest
          kubectl rollout status deployment/todo-app-deployment

      # 9Ô∏è‚É£ Verify deployment status and services
      - name: Verify Deployment
        run: |
          kubectl get pods -o wide
          kubectl get services
          kubectl describe service todo-app-service
          kubectl get events --sort-by=.metadata.creationTimestamp
