name: CI/CD Pipeline Final Fix

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-west-2
  EKS_CLUSTER_NAME: todoapp-prod-eks-eu-west-2
  ECR_REPOSITORY: webserver/todoapp

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::851725622142:role/GitHubActions-EKS-Role

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure EKS access
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Debug authentication
        run: |
          echo "=== DEBUG INFO ==="
          echo "Current IAM Identity:"
          aws sts get-caller-identity
          echo ""
          echo "Testing EKS token:"
          aws eks get-token --cluster-name $EKS_CLUSTER_NAME --region $AWS_REGION --output json | jq -r '.status' || echo "Token failed"
          echo ""

      - name: Fix Kubernetes RBAC mapping
        run: |
          echo "=== FIXING RBAC MAPPING ==="
          
          # Try to update aws-auth ConfigMap
          # First, check if we can even access the cluster
          if kubectl get nodes 2>/dev/null; then
            echo "âœ… Already have access, skipping RBAC fix"
          else
            echo "ðŸ”§ Need to fix RBAC mapping..."
            
            # This is a fallback - we'll use the manual kubeconfig method
            # Get cluster details for manual config
            CLUSTER_ENDPOINT=$(aws eks describe-cluster --name $EKS_CLUSTER_NAME --region $AWS_REGION --query "cluster.endpoint" --output text)
            CLUSTER_CA=$(aws eks describe-cluster --name $EKS_CLUSTER_NAME --region $AWS_REGION --query "cluster.certificateAuthority.data" --output text)
            
            # Create manual kubeconfig that uses the current session
            cat > ~/.kube/config << EOF
            apiVersion: v1
            kind: Config
            current-context: $EKS_CLUSTER_NAME
            contexts:
            - context:
                cluster: $EKS_CLUSTER_NAME
                user: $EKS_CLUSTER_NAME-user
              name: $EKS_CLUSTER_NAME
            clusters:
            - cluster:
                certificate-authority-data: $CLUSTER_CA
                server: $CLUSTER_ENDPOINT
              name: $EKS_CLUSTER_NAME
            users:
            - name: $EKS_CLUSTER_NAME-user
              user:
                exec:
                  apiVersion: client.authentication.k8s.io/v1beta1
                  command: aws
                  args:
                  - eks
                  - get-token
                  - --cluster-name
                  - $EKS_CLUSTER_NAME
                  - --region
                  - $AWS_REGION
                  env:
                  - name: AWS_ACCESS_KEY_ID
                    value: $AWS_ACCESS_KEY_ID
                  - name: AWS_SECRET_ACCESS_KEY
                    value: $AWS_SECRET_ACCESS_KEY
                  - name: AWS_SESSION_TOKEN
                    value: $AWS_SESSION_TOKEN
            EOF
            
            echo "âœ… Created manual kubeconfig with session credentials"
          fi

      - name: Test cluster access
        run: |
          echo "=== FINAL ACCESS TEST ==="
          kubectl get nodes
          echo "âœ… SUCCESS! Cluster access working"

      # Continue with the rest of your steps...
      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin 851725622142.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and push Docker image
        run: |
          docker build -t $ECR_REPOSITORY:latest .
          docker tag $ECR_REPOSITORY:latest 851725622142.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest
          docker push 851725622142.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest

      - name: Deploy to EKS
        run: |
          kubectl apply -f configmap.yaml
          kubectl apply -f secret.yaml
          kubectl apply -f serviceaccount.yaml
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/todo-app-deployment --timeout=300s
          kubectl get pods,svc,deploy